//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kurs_adonet.ServiceFF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceFF.IFilmFinderServer", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IFilmFinderServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/AddNewFilm", ReplyAction="http://tempuri.org/IAddLoadFilm/AddNewFilmResponse")]
        int AddNewFilm(OperationContracts.FilmContent content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/AddNewFilm", ReplyAction="http://tempuri.org/IAddLoadFilm/AddNewFilmResponse")]
        System.Threading.Tasks.Task<int> AddNewFilmAsync(OperationContracts.FilmContent content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFilm", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFilmResponse")]
        OperationContracts.FilmContent GetFilm(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFilm", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFilmResponse")]
        System.Threading.Tasks.Task<OperationContracts.FilmContent> GetFilmAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetSpecific", ReplyAction="http://tempuri.org/IAddLoadFilm/GetSpecificResponse")]
        OperationContracts.AllSpecificAddingFilm GetSpecific();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetSpecific", ReplyAction="http://tempuri.org/IAddLoadFilm/GetSpecificResponse")]
        System.Threading.Tasks.Task<OperationContracts.AllSpecificAddingFilm> GetSpecificAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/SetFavorit", ReplyAction="http://tempuri.org/IAddLoadFilm/SetFavoritResponse")]
        void SetFavorit(string filmName, bool isFavorit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/SetFavorit", ReplyAction="http://tempuri.org/IAddLoadFilm/SetFavoritResponse")]
        System.Threading.Tasks.Task SetFavoritAsync(string filmName, bool isFavorit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFavoritFilms", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsResponse")]
        OperationContracts.FilmContent GetFavoritFilms(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFavoritFilms", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsResponse")]
        System.Threading.Tasks.Task<OperationContracts.FilmContent> GetFavoritFilmsAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFilmsCount", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFilmsCountResponse")]
        int GetFilmsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFilmsCount", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFilmsCountResponse")]
        System.Threading.Tasks.Task<int> GetFilmsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsCount", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsCountResponse")]
        int GetFavoritFilmsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsCount", ReplyAction="http://tempuri.org/IAddLoadFilm/GetFavoritFilmsCountResponse")]
        System.Threading.Tasks.Task<int> GetFavoritFilmsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/CheckUserOnDB", ReplyAction="http://tempuri.org/ILoginRegisterUser/CheckUserOnDBResponse")]
        int CheckUserOnDB(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/CheckUserOnDB", ReplyAction="http://tempuri.org/ILoginRegisterUser/CheckUserOnDBResponse")]
        System.Threading.Tasks.Task<int> CheckUserOnDBAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/GetCurrentUser", ReplyAction="http://tempuri.org/ILoginRegisterUser/GetCurrentUserResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperationContracts.RegistrateCurrentUser))]
        OperationContracts.CurrentUser GetCurrentUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/GetCurrentUser", ReplyAction="http://tempuri.org/ILoginRegisterUser/GetCurrentUserResponse")]
        System.Threading.Tasks.Task<OperationContracts.CurrentUser> GetCurrentUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/AddNewUserOnDB", ReplyAction="http://tempuri.org/ILoginRegisterUser/AddNewUserOnDBResponse")]
        int AddNewUserOnDB(OperationContracts.RegistrateCurrentUser registrate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoginRegisterUser/AddNewUserOnDB", ReplyAction="http://tempuri.org/ILoginRegisterUser/AddNewUserOnDBResponse")]
        System.Threading.Tasks.Task<int> AddNewUserOnDBAsync(OperationContracts.RegistrateCurrentUser registrate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/SetRaiting", ReplyAction="http://tempuri.org/ISetRaiting/SetRaitingResponse")]
        void SetRaiting(int raiting, string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/SetRaiting", ReplyAction="http://tempuri.org/ISetRaiting/SetRaitingResponse")]
        System.Threading.Tasks.Task SetRaitingAsync(int raiting, string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/GetRaitingOfFilm", ReplyAction="http://tempuri.org/ISetRaiting/GetRaitingOfFilmResponse")]
        float GetRaitingOfFilm(string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/GetRaitingOfFilm", ReplyAction="http://tempuri.org/ISetRaiting/GetRaitingOfFilmResponse")]
        System.Threading.Tasks.Task<float> GetRaitingOfFilmAsync(string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/GetCurrentRaiting", ReplyAction="http://tempuri.org/ISetRaiting/GetCurrentRaitingResponse")]
        int GetCurrentRaiting(string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISetRaiting/GetCurrentRaiting", ReplyAction="http://tempuri.org/ISetRaiting/GetCurrentRaitingResponse")]
        System.Threading.Tasks.Task<int> GetCurrentRaitingAsync(string nameOfFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISettings/UploadUserImage", ReplyAction="http://tempuri.org/ISettings/UploadUserImageResponse")]
        void UploadUserImage(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISettings/UploadUserImage", ReplyAction="http://tempuri.org/ISettings/UploadUserImageResponse")]
        System.Threading.Tasks.Task UploadUserImageAsync(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISettings/ChangeUserProfile", ReplyAction="http://tempuri.org/ISettings/ChangeUserProfileResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperationContracts.RegistrateCurrentUser))]
        void ChangeUserProfile(OperationContracts.CurrentUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISettings/ChangeUserProfile", ReplyAction="http://tempuri.org/ISettings/ChangeUserProfileResponse")]
        System.Threading.Tasks.Task ChangeUserProfileAsync(OperationContracts.CurrentUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/AddComment", ReplyAction="http://tempuri.org/IComments/AddCommentResponse")]
        void AddComment(string filmName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/AddComment", ReplyAction="http://tempuri.org/IComments/AddCommentResponse")]
        System.Threading.Tasks.Task AddCommentAsync(string filmName, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/GetComments", ReplyAction="http://tempuri.org/IComments/GetCommentsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperationContracts.RegistrateCurrentUser))]
        OperationContracts.MessageData GetComments(int index, string filmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/GetComments", ReplyAction="http://tempuri.org/IComments/GetCommentsResponse")]
        System.Threading.Tasks.Task<OperationContracts.MessageData> GetCommentsAsync(int index, string filmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/GetCountComments", ReplyAction="http://tempuri.org/IComments/GetCountCommentsResponse")]
        int GetCountComments(string filmName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IComments/GetCountComments", ReplyAction="http://tempuri.org/IComments/GetCountCommentsResponse")]
        System.Threading.Tasks.Task<int> GetCountCommentsAsync(string filmName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilmFinderServerChannel : Kurs_adonet.ServiceFF.IFilmFinderServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilmFinderServerClient : System.ServiceModel.ClientBase<Kurs_adonet.ServiceFF.IFilmFinderServer>, Kurs_adonet.ServiceFF.IFilmFinderServer {
        
        public FilmFinderServerClient() {
        }
        
        public FilmFinderServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FilmFinderServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilmFinderServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilmFinderServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddNewFilm(OperationContracts.FilmContent content) {
            return base.Channel.AddNewFilm(content);
        }
        
        public System.Threading.Tasks.Task<int> AddNewFilmAsync(OperationContracts.FilmContent content) {
            return base.Channel.AddNewFilmAsync(content);
        }
        
        public OperationContracts.FilmContent GetFilm(int index) {
            return base.Channel.GetFilm(index);
        }
        
        public System.Threading.Tasks.Task<OperationContracts.FilmContent> GetFilmAsync(int index) {
            return base.Channel.GetFilmAsync(index);
        }
        
        public OperationContracts.AllSpecificAddingFilm GetSpecific() {
            return base.Channel.GetSpecific();
        }
        
        public System.Threading.Tasks.Task<OperationContracts.AllSpecificAddingFilm> GetSpecificAsync() {
            return base.Channel.GetSpecificAsync();
        }
        
        public void SetFavorit(string filmName, bool isFavorit) {
            base.Channel.SetFavorit(filmName, isFavorit);
        }
        
        public System.Threading.Tasks.Task SetFavoritAsync(string filmName, bool isFavorit) {
            return base.Channel.SetFavoritAsync(filmName, isFavorit);
        }
        
        public OperationContracts.FilmContent GetFavoritFilms(int index) {
            return base.Channel.GetFavoritFilms(index);
        }
        
        public System.Threading.Tasks.Task<OperationContracts.FilmContent> GetFavoritFilmsAsync(int index) {
            return base.Channel.GetFavoritFilmsAsync(index);
        }
        
        public int GetFilmsCount() {
            return base.Channel.GetFilmsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetFilmsCountAsync() {
            return base.Channel.GetFilmsCountAsync();
        }
        
        public int GetFavoritFilmsCount() {
            return base.Channel.GetFavoritFilmsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetFavoritFilmsCountAsync() {
            return base.Channel.GetFavoritFilmsCountAsync();
        }
        
        public int CheckUserOnDB(string login, string password) {
            return base.Channel.CheckUserOnDB(login, password);
        }
        
        public System.Threading.Tasks.Task<int> CheckUserOnDBAsync(string login, string password) {
            return base.Channel.CheckUserOnDBAsync(login, password);
        }
        
        public OperationContracts.CurrentUser GetCurrentUser() {
            return base.Channel.GetCurrentUser();
        }
        
        public System.Threading.Tasks.Task<OperationContracts.CurrentUser> GetCurrentUserAsync() {
            return base.Channel.GetCurrentUserAsync();
        }
        
        public int AddNewUserOnDB(OperationContracts.RegistrateCurrentUser registrate) {
            return base.Channel.AddNewUserOnDB(registrate);
        }
        
        public System.Threading.Tasks.Task<int> AddNewUserOnDBAsync(OperationContracts.RegistrateCurrentUser registrate) {
            return base.Channel.AddNewUserOnDBAsync(registrate);
        }
        
        public void SetRaiting(int raiting, string nameOfFilm) {
            base.Channel.SetRaiting(raiting, nameOfFilm);
        }
        
        public System.Threading.Tasks.Task SetRaitingAsync(int raiting, string nameOfFilm) {
            return base.Channel.SetRaitingAsync(raiting, nameOfFilm);
        }
        
        public float GetRaitingOfFilm(string nameOfFilm) {
            return base.Channel.GetRaitingOfFilm(nameOfFilm);
        }
        
        public System.Threading.Tasks.Task<float> GetRaitingOfFilmAsync(string nameOfFilm) {
            return base.Channel.GetRaitingOfFilmAsync(nameOfFilm);
        }
        
        public int GetCurrentRaiting(string nameOfFilm) {
            return base.Channel.GetCurrentRaiting(nameOfFilm);
        }
        
        public System.Threading.Tasks.Task<int> GetCurrentRaitingAsync(string nameOfFilm) {
            return base.Channel.GetCurrentRaitingAsync(nameOfFilm);
        }
        
        public void UploadUserImage(byte[] image) {
            base.Channel.UploadUserImage(image);
        }
        
        public System.Threading.Tasks.Task UploadUserImageAsync(byte[] image) {
            return base.Channel.UploadUserImageAsync(image);
        }
        
        public void ChangeUserProfile(OperationContracts.CurrentUser user) {
            base.Channel.ChangeUserProfile(user);
        }
        
        public System.Threading.Tasks.Task ChangeUserProfileAsync(OperationContracts.CurrentUser user) {
            return base.Channel.ChangeUserProfileAsync(user);
        }
        
        public void AddComment(string filmName, string comment) {
            base.Channel.AddComment(filmName, comment);
        }
        
        public System.Threading.Tasks.Task AddCommentAsync(string filmName, string comment) {
            return base.Channel.AddCommentAsync(filmName, comment);
        }
        
        public OperationContracts.MessageData GetComments(int index, string filmName) {
            return base.Channel.GetComments(index, filmName);
        }
        
        public System.Threading.Tasks.Task<OperationContracts.MessageData> GetCommentsAsync(int index, string filmName) {
            return base.Channel.GetCommentsAsync(index, filmName);
        }
        
        public int GetCountComments(string filmName) {
            return base.Channel.GetCountComments(filmName);
        }
        
        public System.Threading.Tasks.Task<int> GetCountCommentsAsync(string filmName) {
            return base.Channel.GetCountCommentsAsync(filmName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceFF.IChatService", CallbackContract=typeof(Kurs_adonet.ServiceFF.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperationContracts.RegistrateCurrentUser))]
        void SendMessage(OperationContracts.MessageData msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(OperationContracts.MessageData msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CloseConnection")]
        void CloseConnection();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CloseConnection")]
        System.Threading.Tasks.Task CloseConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AddNewUserChatService")]
        void AddNewUserChatService();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AddNewUserChatService")]
        System.Threading.Tasks.Task AddNewUserChatServiceAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SetMessage")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(OperationContracts.RegistrateCurrentUser))]
        void SetMessage(OperationContracts.MessageData msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : Kurs_adonet.ServiceFF.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Kurs_adonet.ServiceFF.IChatService>, Kurs_adonet.ServiceFF.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(OperationContracts.MessageData msg) {
            base.Channel.SendMessage(msg);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(OperationContracts.MessageData msg) {
            return base.Channel.SendMessageAsync(msg);
        }
        
        public void CloseConnection() {
            base.Channel.CloseConnection();
        }
        
        public System.Threading.Tasks.Task CloseConnectionAsync() {
            return base.Channel.CloseConnectionAsync();
        }
        
        public void AddNewUserChatService() {
            base.Channel.AddNewUserChatService();
        }
        
        public System.Threading.Tasks.Task AddNewUserChatServiceAsync() {
            return base.Channel.AddNewUserChatServiceAsync();
        }
    }
}
